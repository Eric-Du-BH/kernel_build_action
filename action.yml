name: 'Android Kernel Build Action'
description: "A action to built android kernel."

branding:
  icon: 'activity'
  color: 'blue'

inputs:
  kernel-url:
    description: 'Kernel Source Url'
    required: true
  depth:
    required: false
    default: 1
  vendor-url:
    description: 'Kernel Vendor Source Url'
    required: false
  kernel-dir:
    required: false
    default: kernel
  vendor-dir:
    required: false
    default: vendor
  kernel-branch:
    description: 'Branch name'
    required: false
    default: main
  vendor-branch:
    required: false
    default: main
  config:
    description: 'configuration for building android kernel'
    required: true
    default: defconfig
  arch:
    required: true
    default: arm64
  android-version:
    description: 'Android version.'
    required: true
    default: 12
  ksu:
    description: 'KernelSU function support'
    required: false
    default: false
  ksu-version:
    description: 'KernelSU default branch'
    required: false
    default: "main"
  ksu-lkm:
    description: "Build KernelSU as a loadable kernel module"
    required: false
    default: false
  disable-lto:
    description: 'Disable LTO configs for configs.'
    required: false
    default: false
  lxc:
    description: 'Enable lxc and docker configs for configs.'
    required: false
    default: false
  lxc-patch:
    description: 'Apply lxc patch aviod not booting'
    required: false
    default: false
  nethunter:
    description: 'Enable Kali nethunter'
    required: false
    default: false
  nethunter-patch:
    description: 'patch config'
    required: false
    default: false
  kvm:
    description: 'Enable KVM for configs.'
    required: false
    default: false
  ccache:
    description: 'Enable Ccache for compiling kernel'
    required: false
    default: false
  aosp-gcc:
    description: 'Use gcc from aosp project.'
    required: true
    default: true
  aosp-clang:
    description: 'Use clang from aosp project.'
    required: false
    default: false
  aosp-clang-version:
    required: false
    default: "r383902"
  other-clang-url:
    required: false
    default: ''
  other-clang-branch:
    required: false
    default: main
  android-ndk:
    description: 'Use Android NDK to build kernrl (Experimental features)'
    required: false
    default: false
  android-ndk-version:
    description: 'Please press nember instead of r(e.g. : 26).'
    required: false
    default: r21b
  anykernel3:
    description: 'Package kernel use anykernel3.'
    required: false
    default: false
  anykernel3-url:
    description: '3rdparty anykernrl3 url path'
    required: false
    default: ""
  bootimg-url:
    description: "boot.img path"
    required: false
    default: ""
  release:
    description: "After the kernel compilation is completed, it will be automatically published to the releases page"
    required: false
    default: false
  access-token:
    description: 'PAT with repository scope (https://github.com/settings/tokens)'
    required: false
  extra-cmd:
    description: 'Extra options of building kernel.'
    required: false
    default: ""

runs:
  using: 'composite'
  steps:

    - name: Setup ccache
      if: inputs.ccache == 'true'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ inputs.config }}-0cb68f9cbcbb3de9c966cf66ed51471fbe51419e
        max-size: 4G

    - name: Build Kernel
      shell: bash
      run: |
         ########
         if [[ ${GITHUB_ACTIONS} != "true" || ${OSTYPE} != "linux-gnu" || ! -f /bin/apt || "$(id -u)" -eq 0 ]]; then
             printf "This Action Is Intended For non-root Ubuntu Runner.\n"
             exit 127
         fi

         echo "::group:: Installing Building Depend Packages"
         sudo apt-get update
         sudo apt-get install --no-install-recommends -y binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3 aria2 perl
         aria2c -q https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh && NONINTERACTIVE=1 bash ./uninstall.sh -f -q
         echo "::endgroup::"

         export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
         if [ -f /bin/swapon ]; then
             echo "::group:: Setting Up Swap"
             sudo swapoff $SWAP_FILE
             sudo rm $SWAP_FILE
             sudo fallocate -l 16G $SWAP_FILE
             sudo chmod 600 $SWAP_FILE
             sudo mkswap $SWAP_FILE
             sudo swapon $SWAP_FILE
             echo "::endgroup::"
         fi

         if [ ${{ inputs.aosp-gcc }} = true ]; then
             echo "::group:: Downloading AOSP GCC"
             if [ ${{ inputs.aosp-clang }} = true ] || [ ${{ inputs.android.ndk }} = true ]; then
                 mkdir -p -v $HOME/gcc-64
                 aria2c -o gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
                 tar -C $HOME/gcc-64 -zxf gcc-aarch64.tar.gz
                 mkdir -p -v $HOME/gcc-32
                 aria2c -o gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
                 tar -C $HOME/gcc-32 -zxf gcc-arm.tar.gz
             elif [ ${{ inputs.aosp-clang }} = true ] && [ ${{ inputs.android-ndk }} = true ]; then
                 echo "Error: The two options aosp-clang and android-ndk will conflict with each other, please turn off one." && exit 15
             else
                 git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/ --depth=1 -b android${{ inputs.android-version }}-release $HOME/gcc-64
                 git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/ --depth=1 -b android${{ inputs.android-version }}-release $HOME/gcc-32
             fi
         fi
         echo "::endgroup::"

         if [ ${{ inputs.aosp-clang }} = false ] && [ ${{ inputs.android-ndk }} = false ]; then
             echo "::group:: Downloading 3rd clang"
             export OTHER_CLANG_URL=${{ inputs.other-clang-url }}
             if [[ "$OTHER_CLANG_URL" == *'.tar.gz' ]]; then
                 aria2c -o clang.tar.gz "$OTHER_CLANG_URL"
                 mkdir clang
                 tar -C $HOME/clang/ -zxvf clang.tar.gz
             elif [[ "$OTHER_CLANG_URL" == *'.zip' ]]; then
                 aria2c -o clang.zip "$OTHER_CLANG_URL"
                 mkdir clang
                 unzip clang.zip -d $HOME/clang/
             else
                 git clone "$OTHER_CLANG_URL" $HOME/clang --depth=${{ inputs.depth }} -b ${{ inputs.other-clang-branch }}
             fi
         fi
         echo "::endgroup::"

         if [ ${{ inputs.android-ndk }} = true ]; then
             echo "::group:: Downloading Android NDK"
             if [ ${{ inputs.aosp-gcc }} = false ]; then
                 export NDKVER=$(echo "${{ inputs.android-ndk-version }}" | sed 's/r\([0-9]\+\)[a-zA-Z]\?/\1/g')
                 if [ "$NDKVER" -lt "23" ]; then
                     aria2c -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-${{ inputs.android-ndk-version }}-linux-x86_64.zip
                     unzip -d $HOME android-ndk.zip
                 else
                     aria2c -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-${{ inputs.android-ndk-version }}-linux.zip
                     unzip -d $HOME android-ndk.zip
                 fi
             else
                 echo "Please disable aosp-gcc and aosp-clang."
                 exit 127
             fi
             echo "::endgroup::"

             export HOMES=$(pwd)
             export LLVMS=$HOME/android-ndk-${{ inputs.android-ndk-version }}/toolchains/llvm/prebuilt/linux-x86_64/bin
             cd $LLVMS
             for file in $(ls llvm-*); do
                 ln -s -v "$file" "aarch64-linux-android$(( ${{ inputs.android-version }} + 19 ))-${file#llvm-}"
             done
             cd $HOMES
         fi

         if [ ${{ inputs.aosp-clang }} = true ]; then
             echo "::group:: Downloading AOSP clang"
             if [ ${{ inputs.aosp-gcc }} = true ]; then
                 mkdir $HOME/clang -p -v
                 if [ ! -z ${{ inputs.android-version }} ]; then
                     aria2c -o aosp-clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android${{ inputs.android-version }}-release/clang-${{ inputs.aosp-clang-version }}.tar.gz
                 else
                     aria2c -o aosp-clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-${{ inputs.aosp-clang-version }}.tar.gz
                 fi
                 tar -C $HOME/clang -zxf aosp-clang.tar.gz
             else
                 echo "Please enable aosp-gcc."
                 exit 127
             fi
             echo "::endgroup::"
         fi

         echo "::group:: Pulling Kernel Source"
         git clone --recursive ${{ inputs.kernel-url }} -b "${{ inputs.kernel-branch }}" --depth=${{ inputs.depth }} kernel/${{ inputs.kernel-dir }}
         echo "::endgroup::"


         cd kernel/${{ inputs.kernel-dir }}
         export SUBLEVEL=$(cat Makefile | grep "PATCHLEVEL =" | awk '{print $3}')
         function version_gt() { test "$(echo -e "$1\n$2" | sort -V | tail -n1)" == "$1"; }


         echo "::group:: Building Kernel with selected cross compiler"
         mkdir out -p -v
         COMMAND="make -j$(nproc --all) ${{ inputs.config }} ARCH=${{ inputs.arch }} all ${{ inputs.extra-cmd }} O=out"
         if [ ${{ inputs.aosp-clang }} = true ] || [ ! -z ${{ inputs.other-clang-url}} ]; then
              COMMAND+=" PATH=$HOME/clang/bin:$PATH"
         elif [ ${{ inputs.android-ndk }} = true ]; then
              COMMAND+=" CLANG_PATH=$HOME/android-ndk-${{ inputs.android-ndk-version }}/toolchains/llvm/prebuilt/linux-x86_64"
         fi
         export PATH=$CLANG_PATH/bin:$PATH
         if [ ${{ inputs.aosp-gcc }} = true ]; then
             COMMAND+=" CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- CROSS_COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu-"
         elif [ ${{ inputs.android-ndk }} = true ]; then
             COMMAND+=" CROSS_COMPILE=$CLANG_PATH/bin/llvm- CROSS_COMPILE_ARM32=$CLANG_PATH/bin/llvm-"
         fi
         if [ ${{ inputs.aosp-clang }} = true ] || [ ! -z ${{ inputs.other-clang-url}} ]; then
             if [ ${{ inputs.ccache }} = true ]; then
                 COMMAND+=" CC='ccache clang'"
             else
                 COMMAND+=" CC=clang"
             fi
         else
             if [ ${{ inputs.ccache }} = true ]; then
                 COMMAND+=" CC='ccache $HOME/gcc-64/bin/aarch64-linux-android-gcc'"
             fi
         fi
         ${COMMAND}
         echo "::endgroup::"

         unset USE_CCACHE CLANG_TRIPLE CROSS_COMPILE_ARM32 CROSS_COMPILE CLANG_PATH HOMES SUBLEVEL KVER COMMAND SWAP_FILE
         
    - id: uploadi
      if: ${{ inputs.release == 'false' && inputs.anykernel3 == 'false' }}
      uses: actions/upload-artifact@v4
      with:
        name: kernel-built-bootimg
        path: out/**
        if-no-files-found: error
        overwrite: true


posts:
  using: 'composite'
  steps:
    - name: post
      shell: bash
      run:  $HOME/clang/bin/clang --version
